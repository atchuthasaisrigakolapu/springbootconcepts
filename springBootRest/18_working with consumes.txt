In Last session we developed FIRST REST API using Spring Boot
----------------------------------------------------------------

@RestController
@GetMapping
ResponseEntity

-> @RestController annotation is used to represent our class as distributed component

				@Controller + @ResponseBody = @RestController

Note: @RestController class methods will return response directley

			(text / xml / json)

Note: No concept of returning "view file names" in RestController


-> @GetMapping annotation is used to bind RestController method to HTTP GET Req.

			Ex: @GetMapping("/")

-> ResponseEntity class is used to construct response to client

				new ResponseEntity<>(body, httpstatus);

-------------------------------------------------------------------------------------

-> HTTP GET request is used to get data from server
-> HTTP GET request will not have body
-> To send data to server in GET request we will use below 2 options

			1) QueryParams
			2) PathParams


Query Params
------------
-> Query Params represents data in key value format

-> Query Params should present only at end of the URL

-> Query Params will start with '?'

-> If we want to send more than one query param in URL then they should be seperated by using '&'

		Ex: www.ashokitech.com/course?name=sbms&trainer=ashok

-> To read query parameters we will use @RequestParam("key") annotation

----------------------------------------------------------------------------------
@RestController
public class RailRestController{

	@GetMapping("/ticket")
	public ResponseEntity<String> getTicketStatus(@RequestParam("pnr") String pnr){
		//logic to get status from db

		return new ResponseEntity<>(tktStatus, HttpStatus.OK);
	}
}

			URL : http://localhost:9090/ticket?pnr=HHLL43

------------------------------------------------------------------------------------
Note: In JAX-RS api we have @QueryParam annotation to deal with Query Params.
Now a days we are not using JAX-RS directley to develop REST APIs because our Spring MVC having support to develop REST APIs
------------------------------------------------------------------------------------

Path Parameters
----------------
-> Path Parameters also used to send data to server in URL

-> Path Parameters will represent data directley in URL (No keys)

-> Path Parameters can present anywhere in the URL

-> To send multiple path parameters we will use '/' as sepeator

Note: Path Parameters should be represented in URL Pattern (mandatory)

			Ex-1 : /ticket/{pnr}
			Ex-2 : www.ashokitech.com/{course}/info

			Ex-3 : www.ashoitech.com/course/sbms/ashok/info
					("/course/{name}/{trainer}/info)

-> To read Path Params from URL, we will use @PathVariable annotation

------------------------------------------------------------------------------------
@RestController
public class RailRestController{

	@GetMapping("/ticket/{pnr}/info")
	public ResponseEntity<String> getTicketStatus(@PathVariable("pnr") String pnr){
		//logic to get status from db
		return new ResponseEntity<>(tktStatus, HttpStatus.OK);
	}
}

	URL : http://localhost:9090/ticket/JH7890/info
-------------------------------------------------------------------------------------
-> In Web applications we will use QueryParams to send data to server in URL

-> In Distributed applications we will use Path Params to send data to server in URL

-------------------------------------------------------------------------------------
Dealing with XML and JSON data in GET Request For Produces
-------------------------------------------------------------------------------------

-> XML represents data in tags format

-> JSON represents data in key-value format

-> XML & JSON both are intereoperable

Note: Now a days JSON is widely using in distributed applications


Note: In Spring Boot, we no need to write JAX-B and Jackson logics directley because Spring Boot will take care of that. 

Note: Spring Boot internally uses HttpMessageConverters to deal with XML and JSON 



1) Create Spring starter application with below dependencies

		a) spring-boot-starter-web
		b) devtools (optional)


2) Create Binding class to represent response data  (Ticket.java)


@Data
@XmlRootElement
public class Ticket {

	private Integer ticketId;
	private String from;
	private String to;
	private Double price;
	private String jdate;
	private Integer trainNum;

}

3) Create RestController with method to return ticket data  (it shud support both xml & json response)


@RestController
public class TicketRestController {

	@GetMapping(
		value = "/ticket/{ticketId}", 
		produces = { "application/xml", "application/json" }
	)
	public ResponseEntity<Ticket> getTicket(@PathVariable Integer ticketId) {

		Ticket ticket = new Ticket();
		ticket.setTicketId(ticketId);
		ticket.setFrom("Hyd");
		ticket.setTo("Chennai");
		ticket.setPrice(867.00);
		ticket.setTrainNum(6782);

		return new ResponseEntity<>(ticket, HttpStatus.OK);
	}
}

4) Configure server.port in application.properties file (if required)

5) Run the application and test it using Postman



Note-1 : In @GetMapping annotation, "produces" attribute represents in which formats our REST API method can provide response to clients

Note-2 : Client will send request with "Accept" header.

				Ex :  Accept = "application/json"

-> Based on "Accept" header REST API will send response to client in that format. Internally "HTTP Msg Converters" will be used to convert the object data into client understandable format.



Q) Do we need to write the logic of JAX-B and JACKSON in REST Controller to convert data into xml or json ?

Ans) As a programmer we no need to that because REST API will use Message Converters internally to those conversions. Because conversions are unviersal requirement hence Spring Web MVC providing that logic for everybody.

-------------------------------------------------------------------------------------------

produces & Accept

=> "produces" attribute represents in which formats REST API method can provide response

=> "Accept" header represents in which format client expecting response from REST API

-------------------------------------------------------------------------------------------
Dealing with XML & JSON data in request body
-------------------------------------------------------------------------------------------

-> Client application can send data to REST API in 2 ways

			1) In URL
			2) In Request Body

-> To send data in URL we will use Query Params & Path Params. Data will be displayed in URL so not recommended to send sensitive data.

-> To send sensitive data and huge amount of data clients will use Request Body

=> "consumes" represents in which formats REST API method can take input data

=> "Content-Type" header represents in which format client sending data in Request Body.

Note: Based on Content-Type header value, Message Converter will use JAX-B or JACKSON api internally to convert raw data into Object format

	Content-Type = application/json ==> Jackson api will be used to read json data from body
	Content-Type = application/xml ==> JAX-B api will be used to read xml data from body

--------------------------------------------------------------------------------------------

@Data
@XmlRootElement
public class Passenger {

	private String name;
	private String email;
	private String from;
	private String to;
	private Long trainNumber;
}

---------------------------------------------------------------------------------------------

@RestController
public class TicketRestController {

	@PostMapping(
			value = "/ticket",
			consumes = {"application/json", "application/xml"}
	)
	public ResponseEntity<String> bookTicket(@RequestBody Passenger passenger) {
		System.out.println(passenger);
		//logic to book ticket
		return new ResponseEntity<>("Ticket Booked", HttpStatus.CREATED);
	}
}
---------------------------------------------------------------------------------------------

{
	"name": "Raju",
	"email" : "raju@yahoo.com",
	"from" : "Hyd",
	"to": "Pune",
	"trainNumber" : 1234
}

---------------------------------------------------------------------------------------------

produces
Accept

consumes
Content-Type

-> "produces" represents REST API method supporting output formats
-> "consumes" represents REST API method supporting input formats

-> "Content-Type" header represents client sending data format in request body
-> "Accept" header represents client expecting data format in response body

--------------------------------------------------------------------------------------------


Note: We can use "consumes" and "produces" in single REST API method. That means REST API method will take some input from client and it will provide some response to client.


@PostMapping(
	value = "/ticket",
	consumes = {"application/xml", "application/json"},
	produces = {"application/xml", "application/json"}
) 
public ResponseEntity<Ticket> bookTicket (@RequestBody Passenger passenger){

			//logic to bookticket
		
		return new ResponseEntity<>(ticketObj, HttpStatus.CREATED);
}

---------------------------------------------------------------------------------------------

-> Client will send request to above method using both headers "Accept" and "Content-Type"

---------------------------------------------------------------------------------------------



























































