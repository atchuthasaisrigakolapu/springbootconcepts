Today's session : JSON 
-------------------------------------------------------
-> JSON stands for Java Script Object Notation

-> JSON format is universal format to exchange data over a network

-> JSON is intereoperable (Platform Indepdent & Language Independent)

-> When we compare JSON with XML, JSON is light weight
   (it occupies less memory)

-> JSON will represent the data in Key-Value Pair Format

Syntax:
-------
{
   "sid" : 101,
   "sname" : "Raju",
   "skill" : "Java
}
-----------------------------------
<?xml version="1.0" encoding="UTF-8">
<student>
  <sid>101</sid>
  <sname>Raju</sname>
  <skill>Java</skill>
</student>

-----------------------------------------------------------------------------------------------
-> In Java we don't have direct support to work with JSON data

-> We have third party apis to work with JSON data in java applications

		1) Jackson API
		2) Gson API

-> Using above third party apis we can convert Java Object to Json and Json to Java Object

-> Converting Java Object into JSON data is called as Serialiation

-> Converting JSON data to Java Object is called as De-Serialization


			JSON data <------------------> Java Object

-> Normal POJO classes we can use to perform Serializaion and De-Serialization with JACKSON api


Working with Jackson API
++++++++++++++++++++++++++

1) Create Maven Project and add below dependency

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.13.2.2</version>
		</dependency>
-----------------------------------------------------------------------------------------------
2) Create Binding class to represent data

@Data
public class Student {

	private int sid;
	private String name;
	private long rank;
}
-----------------------------------------------------------------------------------------------
3) Create Class to Convert Java Obj to Json data

public class JavaToJsonConverter {

	public static void main(String[] args) throws Exception {
		Student student = new Student();
		student.setSid(101);
		student.setName("Raju");
		student.setRank(8900);

		ObjectMapper mapper = new ObjectMapper();
		mapper.writeValue(new File("student.json"), student);
		System.out.println("JSON File Created...");
	}
}
-----------------------------------------------------------------------------------------------
4) Create Class to convert JSON data to Java Object

public class JsonToJavaConverter {

	public static void main(String[] args) throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		Student student = mapper.readValue(new File("student.json"), Student.class);
		System.out.println(student);
	}
}

---------------------------------------------------------------------------------------------

Working with GSON API
+++++++++++++++++++++


	<dependency>
		<groupId>com.google.code.gson</groupId>
		<artifactId>gson</artifactId>
		<version>2.8.5</version>
	</dependency>


-> In gson api we have a predefined class called 'gson'

	Gson class contains below methods

		toJson ( )  ==> To convert java obj to json format
		fromJson ( ) ==> To convert json to java obj

----------------------------------------------------------------------------------------------










