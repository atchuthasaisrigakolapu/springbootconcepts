In Last session we developed FIRST REST API using Spring Boot
----------------------------------------------------------------

@RestController
@GetMapping
ResponseEntity

-> @RestController annotation is used to represent our class as distributed component

				@Controller + @ResponseBody = @RestController

Note: @RestController class methods will return response directley

			(text / xml / json)

Note: No concept of returning "view file names" in RestController


-> @GetMapping annotation is used to bind RestController method to HTTP GET Req.

			Ex: @GetMapping("/")

-> ResponseEntity class is used to construct response to client

				new ResponseEntity<>(body, httpstatus);

-------------------------------------------------------------------------------------

-> HTTP GET request is used to get data from server
-> HTTP GET request will not have body
-> To send data to server in GET request we will use below 2 options

			1) QueryParams
			2) PathParams


Query Params
------------
-> Query Params represents data in key value format

-> Query Params should present only at end of the URL

-> Query Params will start with '?'

-> If we want to send more than one query param in URL then they should be seperated by using '&'

		Ex: www.ashokitech.com/course?name=sbms&trainer=ashok

-> To read query parameters we will use @RequestParam("key") annotation

----------------------------------------------------------------------------------
@RestController
public class RailRestController{

	@GetMapping("/ticket")
	public ResponseEntity<String> getTicketStatus(@RequestParam("pnr") String pnr){
		//logic to get status from db

		return new ResponseEntity<>(tktStatus, HttpStatus.OK);
	}
}

			URL : http://localhost:9090/ticket?pnr=HHLL43

------------------------------------------------------------------------------------
Note: In JAX-RS api we have @QueryParam annotation to deal with Query Params.
Now a days we are not using JAX-RS directley to develop REST APIs because our Spring MVC having support to develop REST APIs
------------------------------------------------------------------------------------

Path Parameters
----------------
-> Path Parameters also used to send data to server in URL

-> Path Parameters will represent data directley in URL (No keys)

-> Path Parameters can present anywhere in the URL

-> To send multiple path parameters we will use '/' as sepeator

Note: Path Parameters should be represented in URL Pattern (mandatory)

			Ex-1 : /ticket/{pnr}
			Ex-2 : www.ashokitech.com/{course}/info

			Ex-3 : www.ashoitech.com/course/sbms/ashok/info
					("/course/{name}/{trainer}/info)

-> To read Path Params from URL, we will use @PathVariable annotation

------------------------------------------------------------------------------------
@RestController
public class RailRestController{

	@GetMapping("/ticket/{pnr}/info")
	public ResponseEntity<String> getTicketStatus(@PathVariable("pnr") String pnr){
		//logic to get status from db
		return new ResponseEntity<>(tktStatus, HttpStatus.OK);
	}
}

	URL : http://localhost:9090/ticket/JH7890/info
-------------------------------------------------------------------------------------
-> In Web applications we will use QueryParams to send data to server in URL

-> In Distributed applications we will use Path Params to send data to server in URL

-------------------------------------------------------------------------------------
Dealing with XML and JSON data in GET Request For Produces
-------------------------------------------------------------------------------------

-> XML represents data in tags format

-> JSON represents data in key-value format

-> XML & JSON both are intereoperable

Note: Now a days JSON is widely using in distributed applications


Note: In Spring Boot, we no need to write JAX-B and Jackson logics directley because Spring Boot will take care of that. 

Note: Spring Boot internally uses HttpMessageConverters to deal with XML and JSON 



1) Create Spring starter application with below dependencies

		a) spring-boot-starter-web
		b) devtools (optional)


2) Create Binding class to represent response data  (Ticket.java)


@Data
@XmlRootElement
public class Ticket {

	private Integer ticketId;
	private String from;
	private String to;
	private Double price;
	private String jdate;
	private Integer trainNum;

}

3) Create RestController with method to return ticket data  (it shud support both xml & json response)


@RestController
public class TicketRestController {

	@GetMapping(
		value = "/ticket/{ticketId}", 
		produces = { "application/xml", "application/json" }
	)
	public ResponseEntity<Ticket> getTicket(@PathVariable Integer ticketId) {

		Ticket ticket = new Ticket();
		ticket.setTicketId(ticketId);
		ticket.setFrom("Hyd");
		ticket.setTo("Chennai");
		ticket.setPrice(867.00);
		ticket.setTrainNum(6782);

		return new ResponseEntity<>(ticket, HttpStatus.OK);
	}
}

4) Configure server.port in application.properties file (if required)

5) Run the application and test it using Postman



Note-1 : In @GetMapping annotation, "produces" attribute represents in which formats our REST API method can provide response to clients

Note-2 : Client will send request with "Accept" header.

				Ex :  Accept = "application/json"

-> Based on "Accept" header REST API will send response to client in that format. Internally "HTTP Msg Converters" will be used to convert the object data into client understandable format.



Q) Do we need to write the logic of JAX-B and JACKSON in REST Controller to convert data into xml or json ?

Ans) As a programmer we no need to that because REST API will use Message Converters internally to those conversions. Because conversions are unviersal requirement hence Spring Web MVC providing that logic for everybody.


 
































































