RESTFul Services 
=================
1) Spring Web MVC
2) XML & JAX-B api ( xml <--------> java obj)
3) JSON & JACKSON api ( json <--------> java obj)
4) HTTP Protocol
	- Http Request Structure
	- Http Response Structure
	- Http Status Codes & Status Msgs
5) REST Introduction
6) REST Principles
7) REST Architecture ( Resource & Client )
8) REST Resource Development
9) Consumes & Produces
10) Dealing with Media Types
11) Http Msg Converters
12) Exception Handling
13) Swagger Documentation
14) PostMan
15) REST Client Introduction
26) RestTemplate Vs WebClient
27) Reactive Programming
28) Mono Vs Flux Objects
29) Layered Architecture Application
30) Actuators
31) Profiles
32) Embedded Database (h2)
33) Logging
34) Spring Security
35) Unit Testing (Junit + Mockito)


Microservices
=============
1) Monolith Architecture
2) Pros & Cons Of Monolith
3) Microservices Introduction
4) Pros & Cons of Microservices
5) Microservices Architecture
6) Service Registry (Eureka)
7) API Gateway (zuul)
8) Inter Service Communication (FeignClient)
9) Client Side Load Balancing (Ribbon)
10) Admin Server & Client
11) Distributed Logging ( Sleuth & Zipkin )
12) Saaga Design Pattern
13) Circuit Breaker Design Pattern
14) Spring Boot with Kafka Integration
15) Spring Boot with Redis Integration
16) Spring Boot with Angular Integration
17) Docker
18) AWS Deployment
19) JWT
20) OAuth 2.0

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Syllabus of Spring Boot & Microservices
--------------------------------------
Spring Core Basics
Spring Boot
Spring Data JPA

Web MVC
RestFul Services
Microservices

RESTFul Services & Microservices
--------------------------------
Web MVC
RestFul Services
Microservices



Duration : 2 Months
Timings : 6:00 AM - 7:15 AM (IST) - (Mon-Sat)
Fee : 4000 INR (Live Classes + Notes)
Fee : 7000 INR (Live Classes + Notes + videos - 6 Months)
-----------------------------------------------------------------------------------

What is Spring Web MVC ?
++++++++++++++++++++++++

-> Spring Web MVC is one module available in spring framework

-> Using Web MVC Module we can develop 2 types of applications

		1) Web Application
		2) Distributed Application


-> The application which we can access from the browser is called as Web application

	Ex : Gmail, facebook, IRCTC etc...

-> Web Applications are used for Customer to Business Communication ( C 2 B)

		User -----------------> Web app


-> The application which is communicating with other applications are called as Distributed Application

-> Distibuted Applications are used for Business To Business Communication


		Passport App <-------> AADHAR App
	
		Yatra App <-------------> IRCTC App

		GPay <----------------> Banking app

		Swiggy <---------------> Banking App


---------------------------------------------------------------------------------


-> Web applications are used for Customer to Business Communication

-> Distributed applications are used for business to business communication.


Q ) Why one application should communicate with other application ?
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

-> To re-use existing business services one application will communicate with another application.


-----------------------------------------------------------------------------------------------

What is Web Application ? 
What is Distributed Application ?
Why we need to develop Distributed Applications ?
What is Provider ?
What is Consumer ? 

Sun Microsystem provided below apis to develop Distributed Application

	1) JAX-RPC & JAX-WS (For SOAP Webservices)

	2) JAX-RS (For RESTFul Services)

Note: By using Spring Web MVC we can develop both web & Distributed applications

-----------------------------------------------------------------------------------------------
Spring Web MVC Architecture
----------------------------------------------------------------------------------------------
Front Controller (Dispatcher Servlet)
HandlerMapper
Controller
ModelAndView
ViewResolver
View

-> DispatcherServlet is a Predefined servlet class which will act as FrontController. It is responsible to perform Pre-Processing and Post-Processing of a request.

-> HandleMapper is used to identify which request should be processed by which controller method in our application

-> Controller is responsible to handle the request.

-> ModelAndView is a predefined class. Model represents data in key-value format. View represents logical view name.

Note: After request processing completed, controller will return ModelAndView object.

-> ViewResolver is used to identify physical location of view files available in the project.

-> View is used to render Model data in the View Component.

-----------------------------------------------------------------------------------------------
Building First Web Application Using Spring Web MVC
----------------------------------------------------------------------------------------------

-> To create web application, spring boot provided "web-starter" dependency

-> web-starter providing embedded-server (tomcat by default)

-> Embedded Servers are built-in servers which are used to run our boot web applications.

---------------------------------------------------------------------------------------------
1) Create Spring Starter Project with web-starter dependency

2) Configure "tomcat-embed-jasper" dependency in pom.xml file
  (If you are using jsp as view technology this is requird, otherwise this step not required)

	<dependency>
	    <groupId>org.apache.tomcat.embed</groupId>
	    <artifactId>tomcat-embed-jasper</artifactId>
	</dependency>

Note: If we don't add this jasper dependency, when we send the request it will download jsp in browser.

3) Create Controller class using @Controller annotation and write methods to handle requests

4) Bind Controller Method to HTTP Request

5) Create View File with presentation logic

6) Configure View Resolver in application.properties file

		spring.mvc.view.prefix=/views/
		spring.mvc.view.suffix=.jsp

7) Configure Embedded Server PORT in application.properties file (Default port : 8080)	

		server.port=9090

8) Run the application and test it.
-----------------------------------------------------------------------------------------------

=> By default contex-path is empty is in spring boot web applications. That means when we run boot web applications they will run in embedded server. We don't use project name in the url to access our web application.

=> We can configure context-path in application.properties file

		server.servlet.context-path=/mywebapp


=> After adding context-path we have to mention that context-path in url to access our application

		URL : http://localhost:9090/mywebapp/welcome


Note: When we use external server, we can deploy more than one web application in that server. To access specific application we will specify project name in the URL. In spring boot we are using embedded server to run our web application. Every Web application will have its own embedded server thats why context-path is optional.

-----------------------------------------------------------------------------------------------

-> When we modify our code in boot web application, we have re-start our embedded server to execute latest changes. Stopping and Starting the server everytime is time taking process.

-> To avoid this problem we have 'devtools' dependency. DevTools dependency will restart server automatically when we modify our code. 

-> Add DevTools dependency in pom.xml file

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

-----------------------------------------------------------------------------------------------

=> In web applications mainly we will deal with 2 types of requirements

	1) Sending Data From Controller to UI
	2) Sending Data From UI to Controller

 			  data
		UI <-------------------> Controller

-> To send data from Controller to UI we will use Model object. Model is a map which represents data in key-value format.

-> To send data from UI to controller we have several options

		1) Query Params
		2) Path Params
		3) Forms
--------------------------------------------------------------------------------------------

Requirement : Develop spring boot web application to display one book data in jsp page.

---------------------------------------------------------------------------------------------

1) Create Spring Boot application with below dependencies

		a)web-starter
		b)devtools
		c)tomcat-embed-jasper
		d)project-lombok

2) Create Binding class to represent data in object format (Book.java)

3) Create Controller class with method to handle request & response

4) Bind controller class method to HTTP GET Request using @GetMapping annotation

5) Create View File with presentation logic

6) Configure ViewResolver & Server-Port in application.properties file

7) Run the application & test it.

----------------------------------------------------------------------------------------------
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Book {
	
	private Integer bookId;
	private String bookName;
	private Double bookPrice;
}
----------------------------------------------------------------------------------------------
@Controller
public class BookController {
	
	@GetMapping("/book")
	public ModelAndView getBookData() {
		
		ModelAndView mav = new ModelAndView();
		
		Book bookObj = new Book(101, "Spring", 400.00);
		mav.addObject("book", bookObj);
		mav.setViewName("bookView");
		
		return mav;
	}
}
----------------------------------------------------------------------------------------------

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>

<h2>Book Data</h2>

Book Id : ${book.bookId} <br/>
Book Name : ${book.bookName} <br/>
Book Price : ${book.bookPrice }

</body>
</html>
-------------------------------------------------------------------------------------------
spring.mvc.view.prefix=/views/
spring.mvc.view.suffix=.jsp

server.port=9090
-----------------------------------------------------------------------------------------------

Assignment : Develop Spring Boot Web application to display multiple books in table format.

----------------------------------------------------------------------------------------------
















